(()=>{"use strict";var e,r,n={603:()=>{function e(e,r,n){e&&(e.innerHTML=`<table style="border: 1px solid black;">${r.map(((e,r)=>`<tr>${e.map(((e,n)=>1===e?`<td \n        data-x=${n}\n        data-y=${r}\n        class="cell alive" \n        style="background-color:#FA58D0; height:10px; width:10px;"></td>`:`<td \n      data-x=${n}\n      data-y=${r}\n      class="cell dead" \n      style="background-color:#FFFFFF; height:10px; width:10px;"></td>`)).join("")}</tr>`)).join("")}</table>`,e.querySelector("table").addEventListener("click",(e=>{const r=e.target,t=r.getAttribute("data-x"),o=r.getAttribute("data-y");Number(t)>=0&&Number(o)>=0&&n(Number(t),Number(o))})))}function r(e,r,n){const t=e[n];if(void 0===t)return 0;const o=t[r];return void 0===o?0:o}function n(n,t,o){let i,c=!1;o.innerHTML='<div class="field-wrapper"></div><button>Start</button>';const d=o.querySelector(".field-wrapper"),a=o.querySelector("button");let u=Array.from({length:t},(()=>Array.from({length:n},(()=>0))));const l=(r,n)=>{u[n][r]=0===u[n][r]?1:0,e(d,u,l)};function s(){c=!1,a&&(a.innerHTML="Start"),clearInterval(i)}e(d,u,l),a&&a.addEventListener("click",(()=>{c?s():(c=!0,a&&(a.innerHTML="Stop"),i=setInterval((()=>{u=function(e){return e.map(((n,t)=>n.map(((n,o)=>{const i=function(e,n,t){let o=0;for(let i=e-1;i<=e+1;i+=1)o+=Number(r(t,i,n-1));for(let i=e-1;i<=e+1;i+=1)o+=Number(r(t,i,n+1));return o+=Number(r(t,e-1,n)),o+=Number(r(t,e+1,n)),o}(o,t,e),c=r(e,o,t);return 3===(d=i)?1:d>3||d<2?0:2===d&&1===c?1:0;var d}))))}(u),e(d,u,l),function(e){for(let r=0;r<e.length;r+=1){const n=e[r];for(let e=0;e<n.length;e+=1)if(n[e])return!0}return!1}(u)||(alert("Death on the block"),s())}),1e3))}))}const t=document.createElement("div"),o=document.createElement("div");document.body.appendChild(t),document.body.appendChild(o),n(3,3,t),n(10,10,o)}},t={};function o(e){var r=t[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var i=t[e]={exports:{}};try{var c={id:e,module:i,factory:n[e],require:o};o.i.forEach((function(e){e(c)})),i=c.module,c.factory.call(i.exports,i,i.exports,c.require)}catch(e){throw i.error=e,e}return i.exports}o.m=n,o.c=t,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"a19c55574bdaca60efc4",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ts-game-of-life:",o.l=(n,t,i,c)=>{if(e[n])e[n].push(t);else{var d,a;if(void 0!==i)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var s=u[l];if(s.getAttribute("src")==n||s.getAttribute("data-webpack")==r+i){d=s;break}}d||(a=!0,(d=document.createElement("script")).charset="utf-8",d.timeout=120,o.nc&&d.setAttribute("nonce",o.nc),d.setAttribute("data-webpack",r+i),d.src=n),e[n]=[t];var f=(r,t)=>{d.onerror=d.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],d.parentNode&&d.parentNode.removeChild(d),o&&o.forEach((e=>e(t))),r)return r(t)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:d}),12e4);d.onerror=f.bind(null,d.onerror),d.onload=f.bind(null,d.onload),a&&document.head.appendChild(d)}},(()=>{var e,r,n,t={},i=o.c,c=[],d=[],a="idle",u=0,l=[];function s(e){a=e;for(var r=[],n=0;n<d.length;n++)r[n]=d[n].call(null,e);return Promise.all(r)}function f(){0==--u&&s("ready").then((function(){if(0===u){var e=l;l=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return s("check").then(o.hmrM).then((function(n){return n?s("prepare").then((function(){var t=[];return r=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](n.c,n.r,n.m,e,r,t),e}),[])).then((function(){return r=function(){return e?m(e):s("ready").then((function(){return t}))},0===u?r():new Promise((function(e){l.push((function(){e(r())}))}));var r}))})):s(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var t=r.map((function(r){return r(e)}));r=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return s("abort").then((function(){throw o[0]}));var i=s("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var c,d=s("apply"),a=function(e){c||(c=e)},u=[];return t.forEach((function(e){if(e.apply){var r=e.apply(a);if(r)for(var n=0;n<r.length;n++)u.push(r[n])}})),Promise.all([i,d]).then((function(){return c?s("fail").then((function(){throw c})):n?m(e).then((function(e){return u.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):s("idle").then((function(){return u}))}))}function v(){if(n)return r||(r=[]),Object.keys(o.hmrI).forEach((function(e){n.forEach((function(n){o.hmrI[e](n,r)}))})),n=void 0,!0}o.hmrD=t,o.i.push((function(l){var m,v,y,b,g=l.module,E=function(r,n){var t=i[n];if(!t)return r;var o=function(o){if(t.hot.active){if(i[o]){var d=i[o].parents;-1===d.indexOf(n)&&d.push(n)}else c=[n],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+n),c=[];return r(o)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(n){r[e]=n}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(o,l,d(l));return o.e=function(e,n){return function(e){switch(a){case"ready":s("prepare");case"prepare":return u++,e.then(f,f),e;default:return e}}(r.e(e,n))},o}(l.require,l.id);g.hot=(m=l.id,v=g,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){c=v.parents.slice(),e=y?void 0:m,o(m)},active:!0,accept:function(e,r,n){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)b._acceptedDependencies[e[t]]=r||function(){},b._acceptedErrorHandlers[e[t]]=n;else b._acceptedDependencies[e]=r||function(){},b._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)b._declinedDependencies[e[r]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=b._disposeHandlers.indexOf(e);r>=0&&b._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":r=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)})),s("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return a;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var r=d.indexOf(e);r>=0&&d.splice(r,1)},data:t[m]},e=void 0,b),g.parents=c,g.children=[],c=[],l.require=E})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");if(n.length)for(var t=n.length-1;t>-1&&!e;)e=n[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,r,n,t,i,c=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},d={};function a(r,n){return e=n,new Promise(((e,n)=>{d[r]=e;var t=o.p+o.hu(r),i=new Error;o.l(t,(e=>{if(d[r]){d[r]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+r+" failed.\n("+t+": "+o+")",i.name="ChunkLoadError",i.type=t,i.request=o,n(i)}}))}))}function u(e){function d(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var i=t.pop(),c=i.id,d=i.chain,u=o.c[c];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:d,moduleId:c};if(u.hot._main)return{type:"unaccepted",chain:d,moduleId:c};for(var l=0;l<u.parents.length;l++){var s=u.parents[l],f=o.c[s];if(f){if(f.hot._declinedDependencies[c])return{type:"declined",chain:d.concat([s]),moduleId:c,parentId:s};-1===r.indexOf(s)&&(f.hot._acceptedDependencies[c]?(n[s]||(n[s]=[]),a(n[s],[c])):(delete n[s],r.push(s),t.push({chain:d.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function a(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,r=void 0;var u={},l=[],s={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(o.o(n,p)){var h,m=n[p],v=!1,y=!1,b=!1,g="";switch((h=m?d(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+g));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+g));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),b=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in s[p]=m,a(l,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(u[p]||(u[p]=[]),a(u[p],h.outdatedDependencies[p]));b&&(a(l,[h.moduleId]),s[p]=f)}n=void 0;for(var E,w=[],_=0;_<l.length;_++){var I=l[_],D=o.c[I];D&&(D.hot._selfAccepted||D.hot._main)&&s[I]!==f&&!D.hot._selfInvalidated&&w.push({module:I,require:D.hot._requireSelf,errorHandler:D.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete c[e]})),t=void 0;for(var r,n=l.slice();n.length>0;){var i=n.pop(),d=o.c[i];if(d){var a={},s=d.hot._disposeHandlers;for(_=0;_<s.length;_++)s[_].call(null,a);for(o.hmrD[i]=a,d.hot.active=!1,delete o.c[i],delete u[i],_=0;_<d.children.length;_++){var f=o.c[d.children[_]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in u)if(o.o(u,p)&&(d=o.c[p]))for(E=u[p],_=0;_<E.length;_++)r=E[_],(e=d.children.indexOf(r))>=0&&d.children.splice(e,1)},apply:function(r){for(var n in s)o.o(s,n)&&(o.m[n]=s[n]);for(var t=0;t<i.length;t++)i[t](o);for(var c in u)if(o.o(u,c)){var d=o.c[c];if(d){E=u[c];for(var a=[],f=[],p=[],h=0;h<E.length;h++){var m=E[h],v=d.hot._acceptedDependencies[m],y=d.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),f.push(y),p.push(m)}}for(var b=0;b<a.length;b++)try{a[b].call(null,E)}catch(n){if("function"==typeof f[b])try{f[b](n,{moduleId:c,dependencyId:p[b]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:c,dependencyId:p[b],error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:p[b],error:n}),e.ignoreErrored||r(n)}}}for(var g=0;g<w.length;g++){var _=w[g],I=_.module;try{_.require(I)}catch(n){if("function"==typeof _.errorHandler)try{_.errorHandler(n,{moduleId:I,module:o.c[I]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:I,error:n}),e.ignoreErrored||r(n)}}return l}}}self.webpackHotUpdatets_game_of_life=(r,t,c)=>{for(var a in t)o.o(t,a)&&(n[a]=t[a],e&&e.push(a));c&&i.push(c),d[r]&&(d[r](),d[r]=void 0)},o.hmrI.jsonp=function(e,r){n||(n={},i=[],t=[],r.push(u)),o.o(n,e)||(n[e]=o.m[e])},o.hmrC.jsonp=function(e,d,l,s,f,p){f.push(u),r={},t=d,n=l.reduce((function(e,r){return e[r]=!1,e}),{}),i=[],e.forEach((function(e){o.o(c,e)&&void 0!==c[e]?(s.push(a(e,p)),r[e]=!0):r[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,n){r&&o.o(r,e)&&!r[e]&&(n.push(a(e)),r[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(603)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,